name: Full Worflow

on:
  workflow_dispatch:
    branches: [ main ]


jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      INSTANCE_ID: ${{ steps.set-ip.outputs.instance_id}}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.2

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./hrhouz-terraform

      - name: Plan Terraform changes
        run: terraform plan -out=PLAN
        working-directory: ./hrhouz-terraform
        

      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./hrhouz-terraform

      - name: Set output
        id: set-ip
        run: |-
          echo "::set-output name=instance_id::$(terraform output instance_id)"


  build-and-push:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v3
        name: Checkout Code

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Build and Tag Image with Version
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }} .
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest

      - name: Push Image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest

      - name: Clean Up Local Image
        run: |
          docker image rm ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          docker image rm ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest


  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - uses: actions/checkout@v3
        name: Checkout Code

      - name: Set instance ID as env variable
        run: echo INSTANCE_ID=${{ needs.terraform.outputs.INSTANCE_ID }} >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Retrieve Instance Public IP
        id: get-ip
        run: aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} | jq -r '.Reservations[].Instances[].PublicIpAddress'

      # - name: Install AWS Systems Manager Run Command Agent (Optional if not already installed)
      #   run: |
      #     aws ssm send-command \
      #       --command-document-name AWS-InstallAgent \
      #       --targets <instance-ids>
      #     # Wait for agent to be installed before proceeding
      #     sleep 180

      - name: Deploy Image to EC2
        run: |
          aws ssm send-command \
            --document-name AWS-RunShellScript \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --parameters \
              entries[0].key=commands \
              entries[0].value=[
                "sudo apt update",
                "sudo apt install docker.io -y",
                "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
                "sudo docker stop hrhouz-container || true",
                "sudo docker rm hrhouz-container || true",
                "sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest",
                "sudo docker run -d --name hrhouz-container -p 80:8080 ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest"



