name: Hrhouz Workflow

on:
  workflow_dispatch:
    branches: [main]

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./hrhouz-ecr-ec2

      - name: Apply Terraform Changes
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./hrhouz-ecr-ec2

  build-push:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Tag Image with Version
        id: build-image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }} .
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest" >> $GITHUB_ENV

      - name: Push Image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest

      - name: Clean Up Local Image
        run: |
          docker image rm ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          docker image rm ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: '2'
          aws-region: ${{ vars.AWS_REGION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Grant permission for SSM SendCommand
        run: aws iam attach-role-policy --role-name ${{ vars.SSM_ROLE_NAME }} --policy-arn arn:aws:iam::aws:policy/AmazonSSMFullAccess

#       - name: Install Docker on EC2 and add user to Docker group
#         run: |
#           aws ssm send-command \
#             --instance-ids ${{ needs.terraform.steps.apply.outputs.instance_id }} \
#             --document-name AWS-RunShellScript \
#             --parameters "commands=sudo apt install -y docker && sudo usermod -aG docker $USER" \
#             --output text > /dev/null

#       - name: Login to ECR with AWS CLI credentials
#         run: |
#           aws ecr get-authorization-token --registry-ids ${{ needs.build-push.steps.login-ecr.outputs.registry }} \
#           | jq -r '.authorizationData[0].authorizationToken' | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

#       - name: Pull image from ECR
#         run: docker pull ${{ needs.build-push.steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest

#       - name: Run Docker container on EC2
#         run: |
#           aws ssm send-command \
#             --instance-ids ${{ needs.terraform.steps.apply.outputs.instance_id }} \
#             --document-name AWS-RunShellScript \
#             --parameters "commands=docker run -d ${{ needs.build-push.steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest"" \
#             --output text > /dev/null
# ===========================================================
      - name: Install Docker on EC2 and add user to Docker group
        run: |
          aws ssm send-command \
            --instance-ids ${{ needs.terraform.steps.apply.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=sudo apt install -y docker && sudo usermod -aG docker $USER" \
            --output text > /dev/null

      - name: Authenticate Docker to ECR
        run: |
          aws ssm send-command \
            --instance-ids ${{ needs.terraform.steps.apply.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=$(aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ needs.build-push.steps.login-ecr.outputs.registry }})" \
            --output text > /dev/null


      - name: Pull Docker image from ECR
        run: |
          aws ssm send-command \
            --instance-ids ${{ needs.terraform.steps.apply.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=docker pull ${{ needs.build-push.steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest" \
            --output text > /dev/null

      - name: Run Docker container on EC2
        run: |
          aws ssm send-command \
            --instance-ids ${{ needs.terraform.steps.apply.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=docker run ${{ needs.build-push.steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest" \
            --output text > /dev/null
